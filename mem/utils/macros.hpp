#pragma once
#include <bits/stdint-intn.h>
#include <stdint.h>

#include <array>
#include <cmath>
#include <utility>
#include <vector>
namespace null_revisit {
static constexpr int kVecSize = 1 * 1024; // L1
using default_type = int32_t;
static constexpr default_type kSpecialValue =
    std::numeric_limits<default_type>::max();
using row_id_type = int32_t;
using prefix_sum_type = uint16_t;
using SelVector = std::vector<row_id_type>;
static constexpr int kDefaultTypeSize = sizeof(default_type);
// how many values can AVX512 register store
static constexpr auto kBatchSize = 512 / 8 / sizeof(default_type);
static const uint32_t rand_uint32[1024] __attribute__((aligned(64))) = {
    345,  2686, 2596, 2991, 2870, 3782, 1399, 2505, 1051, 3751, 893,  1815,
    876,  2646, 1498, 1546, 343,  2481, 3118, 872,  760,  3564, 2955, 1924,
    2682, 146,  2897, 670,  756,  1278, 1704, 1389, 2705, 3750, 1412, 3375,
    1667, 532,  694,  3622, 114,  1645, 844,  2761, 3482, 1343, 1335, 3208,
    1401, 3852, 3107, 3905, 3291, 1883, 1950, 2370, 3697, 2589, 3069, 2265,
    1613, 1088, 2633, 1638, 2087, 157,  2184, 5,    651,  1766, 831,  227,
    3655, 2149, 3436, 2212, 190,  3218, 3,    446,  1644, 1927, 3662, 3777,
    209,  832,  1256, 2390, 1156, 4057, 2368, 154,  2845, 110,  2608, 564,
    1371, 2208, 3709, 2092, 2597, 2109, 3226, 242,  1700, 3993, 3309, 1933,
    4035, 2101, 3675, 4058, 3796, 980,  278,  731,  2807, 1788, 2357, 3508,
    703,  1848, 770,  4060, 3979, 3423, 3053, 3504, 3823, 3619, 2743, 243,
    2718, 277,  178,  2714, 4033, 3988, 526,  190,  3748, 2702, 1491, 3345,
    2127, 920,  1865, 886,  2277, 1097, 3963, 3978, 372,  1579, 3362, 5,
    2932, 4022, 3185, 488,  383,  2002, 14,   4073, 1144, 318,  3116, 2731,
    2931, 3125, 2697, 387,  3424, 1892, 1594, 3027, 1770, 2622, 2564, 3960,
    1654, 3370, 3505, 716,  4027, 952,  409,  2354, 540,  2258, 2148, 429,
    3451, 2135, 2212, 3382, 3648, 1515, 698,  1610, 2206, 1011, 1101, 4016,
    2337, 485,  3735, 969,  2277, 2347, 3014, 3172, 3184, 645,  2764, 834,
    3375, 816,  395,  788,  305,  3331, 3167, 2632, 699,  3241, 564,  2153,
    1862, 3949, 3519, 1767, 706,  3122, 1621, 1822, 1326, 3541, 3564, 2888,
    761,  2414, 995,  3238, 1599, 3538, 3223, 692,  3270, 921,  2928, 3052,
    137,  2086, 3209, 2862, 2376, 1281, 2529, 3297, 1818, 806,  3271, 1705,
    3988, 943,  4093, 1107, 231,  1573, 1820, 676,  2350, 757,  3830, 1175,
    3638, 884,  3719, 3630, 828,  2861, 2377, 596,  3279, 2158, 3702, 3079,
    936,  572,  2496, 2642, 2765, 2080, 3330, 2773, 180,  3977, 2568, 867,
    1002, 701,  408,  297,  2636, 1303, 445,  2515, 509,  369,  456,  1909,
    2949, 4023, 3789, 2191, 634,  2784, 3266, 4072, 3548, 3529, 49,   2811,
    1071, 676,  1150, 1444, 3004, 1893, 2927, 3620, 2234, 2086, 3862, 2343,
    3174, 3671, 234,  3967, 83,   2636, 648,  3454, 1772, 214,  67,   2,
    1735, 3969, 947,  2161, 2458, 3350, 2966, 1875, 2812, 654,  517,  3751,
    2430, 2417, 818,  32,   2599, 507,  3,    1979, 3145, 354,  2856, 3459,
    2776, 3495, 2548, 1572, 868,  2532, 2257, 2250, 2808, 2095, 3740, 2137,
    3963, 111,  229,  352,  2979, 1007, 2085, 1427, 3338, 454,  1262, 1989,
    1391, 3222, 3297, 797,  2741, 3293, 869,  3096, 1233, 2035, 3306, 3564,
    4091, 3024, 2852, 1285, 387,  1065, 1140, 1799, 2032, 637,  1243, 2334,
    17,   1506, 223,  2922, 2018, 1789, 2437, 3124, 665,  1910, 904,  433,
    3190, 920,  2144, 2398, 2882, 844,  2856, 1982, 3018, 348,  1787, 2726,
    4026, 1113, 336,  2525, 3481, 2636, 3674, 1604, 1261, 1271, 3944, 1065,
    3569, 79,   338,  1578, 1889, 3999, 1506, 3416, 642,  2268, 3801, 876,
    1476, 3557, 3753, 3291, 3050, 320,  3939, 839,  3201, 1302, 453,  3007,
    3450, 4044, 419,  3803, 1142, 1531, 3630, 1508, 2672, 1733, 3275, 2717,
    1451, 803,  2391, 3867, 1164, 2695, 934,  2509, 3450, 698,  3476, 945,
    3470, 2504, 3910, 2081, 3785, 54,   1966, 3225, 3988, 4043, 1271, 626,
    2664, 3030, 2845, 3475, 3958, 1400, 1620, 2568, 453,  2657, 1965, 2062,
    1661, 2470, 720,  333,  1560, 641,  2499, 1385, 2089, 1692, 837,  2315,
    3232, 720,  1077, 1443, 2648, 2384, 3951, 692,  2033, 1442, 627,  3118,
    1628, 3948, 3851, 644,  3036, 2702, 877,  2014, 3167, 2544, 3096, 862,
    3564, 158,  2800, 603,  3035, 3561, 884,  767,  3097, 636,  2979, 1156,
    575,  1040, 2120, 3145, 2736, 175,  1787, 3958, 3964, 255,  3876, 2981,
    2978, 4083, 1180, 280,  3981, 360,  1354, 3297, 2329, 1044, 708,  3644,
    521,  1502, 3425, 3250, 4072, 190,  2753, 1812, 3122, 2183, 3357, 3800,
    31,   3713, 3877, 3269, 1577, 2135, 198,  2986, 3697, 3218, 1172, 1352,
    1501, 3757, 2512, 2000, 1009, 3360, 773,  2707, 3871, 2701, 1864, 1373,
    1584, 109,  287,  35,   3259, 55,   1319, 473,  31,   3150, 3269, 2851,
    1950, 1199, 1858, 4035, 3464, 3046, 4054, 2058, 1266, 3762, 2665, 3735,
    1217, 3777, 2386, 3966, 1193, 3274, 3324, 3276, 3302, 2258, 2116, 1173,
    1024, 3186, 1945, 3888, 1822, 1976, 2482, 1901, 2102, 2137, 4095, 1526,
    306,  3341, 2185, 3029, 3233, 1026, 3305, 1043, 2510, 1796, 4035, 3669,
    943,  1593, 2160, 2637, 3279, 1097, 1886, 3573, 3589, 3354, 847,  2503,
    3809, 2356, 3785, 2442, 134,  3320, 638,  2033, 524,  2914, 1042, 2359,
    2800, 3896, 1472, 4091, 2018, 2132, 2921, 2420, 3232, 3790, 1396, 3085,
    3981, 2657, 3669, 2118, 2260, 789,  3313, 437,  1189, 1673, 407,  24,
    3933, 3140, 2806, 2943, 3640, 3412, 397,  634,  4006, 152,  627,  714,
    2080, 3009, 3090, 3843, 101,  1353, 251,  2132, 3793, 573,  677,  1045,
    3222, 2509, 1156, 1152, 3807, 1315, 2579, 2821, 1050, 782,  430,  1996,
    668,  2375, 1453, 3711, 1856, 3390, 419,  2466, 3225, 3493, 2268, 2787,
    3877, 1450, 3441, 3194, 2400, 2955, 3053, 1814, 2447, 2361, 3726, 997,
    1396, 1023, 257,  3415, 821,  2391, 3199, 999,  1795, 3617, 3783, 754,
    1371, 355,  3790, 770,  454,  2838, 2560, 3439, 3338, 100,  3040, 2680,
    1447, 2645, 836,  3287, 2939, 2544, 987,  1126, 115,  1581, 623,  1576,
    2545, 2158, 1153, 1432, 1275, 3754, 2970, 1574, 1342, 1420, 809,  1615,
    2367, 390,  3956, 3199, 430,  2158, 326,  3023, 2074, 3446, 3413, 575,
    3337, 3585, 140,  872,  1796, 1568, 3179, 1935, 2392, 749,  1120, 2067,
    3549, 991,  1728, 368,  1697, 2923, 818,  3639, 594,  2443, 3552, 813,
    1830, 2405, 2624, 1220, 3345, 2563, 412,  2284, 1851, 3102, 1070, 1792,
    1016, 1366, 2963, 3384, 569,  1780, 130,  85,   2922, 1923, 3198, 2292,
    462,  707,  2520, 1726, 1542, 986,  3547, 2697, 2966, 1474, 3158, 486,
    1594, 693,  3297, 1682, 1133, 161,  296,  473,  487,  1331, 3847, 1994,
    1767, 2251, 818,  3932, 1096, 205,  1561, 2762, 3394, 979,  3221, 827,
    1664, 2499, 1328, 2242, 3936, 1680, 3142, 1742, 2507, 3811, 1841, 3470,
    3655, 1887, 1765, 1034, 324,  2121, 2605, 402,  1762, 1233, 2726, 262,
    958,  2747, 1115, 1589, 1015, 1865, 3151, 1481, 1570, 2239, 3058, 3426,
    1818, 540,  1401, 1854, 3259, 2582, 1841, 4091, 3470, 1067, 4077, 3992,
    266,  3330, 1845, 1757, 2322, 2081, 520,  3417, 3684, 1173, 123,  3914,
    2758, 2205, 1187, 692,  2728, 2306, 3913, 407,  3638, 3059, 706,  397,
    230,  3051, 1213, 113};

// template <typename T, T... Is>
// constexpr std::array<T, sizeof...(Is)>
// integer_sequence_to_array_impl(std::integer_sequence<T, Is...>) {
//   return {{Is...}};
// }

// template <typename T, T N>
// constexpr auto integer_sequence_to_array() {
//   return integer_sequence_to_array_impl(std::make_integer_sequence<T, N>());
// }
// static const auto row_ids_prealloc = integer_sequence_to_array<row_id_type,
// kVecSize>();

static const std::array<row_id_type, kVecSize> row_ids_prealloc = [] {
    std::array<row_id_type, kVecSize> arr{};
    for (int i = 0; i < kVecSize; ++i) {
        arr[i] = i;
    }
    return arr;
}();

// https://www.vldb.org/pvldb/vol14/p2491-gupta.pdf
using bit_string_type = uint16_t;
static constexpr int kJacobson_c = sizeof(bit_string_type) * 8;
static constexpr int kJacobson_power2c = 1 << kJacobson_c;
static const std::array<std::array<uint8_t, kJacobson_c>, kJacobson_power2c>
    jacobson_map = [] {
        std::array<std::array<uint8_t, kJacobson_c>, kJacobson_power2c> arr{};
        for (int i = 0; i < kJacobson_power2c; ++i) {
            uint8_t cur = 0;
            for (int j = 0; j < kJacobson_c; ++j) {
                arr[i][j] = cur;
                cur += (i >> j) & 1;
            }
        }
        return arr;
    }();

} // namespace null_revisit